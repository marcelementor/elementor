//
// Icon List
//

$breakpoints: (
	0: (
		device: '-widescreen',
		querySize: $screen-widescreen-min,
		queryCondition: 'min-width: ',
	),
	1: (
		device: '-laptop',
		querySize: $screen-laptop-max,
		queryCondition: 'max-width: ',
	),
	2: (
		device: '-tablet_extra',
		querySize: $screen-tablet-extra-max,
		queryCondition: 'max-width: ',
	),
	3: (
		device: '-tablet',
		querySize: $screen-tablet-max,
		queryCondition: 'max-width: ',
	),
	4: (
		device: '-mobile_extra',
		querySize: $screen-mobile-extra-max,
		queryCondition: 'max-width: ',
	),
	5: (
		device: '-mobile_extra',
		querySize: $screen-mobile-extra-max,
		queryCondition: 'max-width: ',
	),
	6: (
		device: '-mobile',
		querySize: $screen-mobile-max,
		queryCondition: 'max-width: ',
	),
);

@mixin iconListItem( $device ) {

	&.elementor-element.elementor-icon-list#{ $device }--layout-{

		&inline {

			.elementor-widget-container {
				overflow: hidden;
			}

			.elementor-icon-list-items {

				display: flex;
				flex-wrap: wrap;
				margin-left: var(--e-icon-list-space-between-negative, -8px);
				margin-right: var(--e-icon-list-space-between-negative, -8px);				

				.elementor-icon-list-item {
					word-break: break-word;
					margin-left: var(--e-icon-list-space-between, 8px);
					margin-right: var(--e-icon-list-space-between, 8px);				

					&:after {
						width: auto;
						position: relative;
						height: 100%;
						border-top: 0;
						border-bottom: 0;
						border-right: 0;
						border-left-width: 1px;
						border-style: solid;
						@include end(-8px);
						#{$start}: var(--e-icon-list-space-between, auto);
						#{$end}: auto;
					}

					&:not(:last-child) {
						padding-bottom: unset;
					}
					&:not(:first-child) {
						margin-top: unset;
					}

				}
			}
		}

		&traditional {

			.elementor-icon-list-items {
				list-style-type: none;
				margin: 0;
				padding: 0;
				display: block;
				word-break: unset;
				margin-left: unset;
				margin-left: unset;

				.elementor-icon-list-item {
					margin: 0;
					padding: 0;
					position: relative;
					margin-left: unset;
					margin-left: unset;
			
					&:after {
						position: absolute;
						bottom: 0;
						width: 100%;
					}
			
					&, a {
						display: flex;
						align-items: center;
						font-size: inherit;
					}

					&:not(:last-child) {
						padding-bottom: var(--e-icon-list-space-between);
					}
					&:not(:first-child) {
						margin-top: var(--e-icon-list-space-between);
					}
	
				}

			}
		
		}
	}
}

@mixin iconListItemAlignment( $device ) {

	&.elementor#{ $device }-align-center {

		.elementor-icon-list-items { 
			justify-content: center;
		}

		.elementor-icon-list-item {

			&, a {
				justify-content: center;
			}

			&:after {
				margin: auto;
			}

		}
	}

	&.elementor#{ $device }-align-left {

		.elementor-icon-list-items {
			justify-content: getValueByDirection( flex-start, flex-end );
		}

		.elementor-icon-list-item {

			&, a {
				justify-content: getValueByDirection(flex-start, flex-end);
				text-align: left;
			}
		}

	}

	&.elementor#{ $device }-align-right {

		.elementor-icon-list-items {
			justify-content: getValueByDirection( flex-end, flex-start );
		}

		.elementor-icon-list-item {

			&, a {
				justify-content: getValueByDirection(flex-end, flex-start);
				text-align: right;
			}

			&:after {
				margin: unset;
			}

		}

	}

	&:not(.elementor#{ $device }-align-right) {

		.elementor-icon-list-item {

			&:after {
				@include start(0);
			}

		}
	}

	&:not(.elementor#{ $device }-align-left) {

		.elementor-icon-list-item {

			&:after {
				@include end(0);
			}

		}
	}
}

@mixin loopIconListItem( $breakpoints, $type ) {
	@each $i, $breakpoint in $breakpoints {
		@media ( #{ map-get( $breakpoint, queryCondition ) map-get( $breakpoint, querySize ) } ) {
			@if 'list' == $type {
				@include iconListItem( #{ map-get( $breakpoint, device ) } );
			} @else if 'alignment' == $type {
				@include iconListItemAlignment( map-get( $breakpoint, device ) );
			}
		}
	}
}

.elementor-widget {
	$e-icon-list-svg-icon-size: var(--e-icon-list-icon-size, 1em);

	&.elementor-icon-list--layout-inline {

		.elementor-widget-container {
			overflow: hidden;
		}
	}

	.elementor-icon-list-items.elementor-inline-items {

		margin-right: -8px;
		margin-left: -8px;

		.elementor-icon-list-item {
			margin-right: 8px;
			margin-left: 8px;

			&:after {
				width: auto;
				left: auto;
				right: auto;
				position: relative;
				height: 100%;
				border-top: 0;
				border-bottom: 0;
				border-right: 0;
				border-left-width: 1px;
				border-style: solid;
				@include end(-8px);
			}
		}
	}

	.elementor-icon-list-items {
		list-style-type: none;
		margin: 0;
		padding: 0;
	}

	.elementor-icon-list-item {
		margin: 0;
		padding: 0;
		position: relative;

		&:after {
			position: absolute;
			bottom: 0;
			width: 100%;
		}

		&, a {
			display: flex;
			align-items: center;
			font-size: inherit;
		}
	}

	@include loopIconListItem( $breakpoints, 'list' );

	.elementor-icon-list-icon + .elementor-icon-list-text {
		align-self: center;
		@include padding-start(5px);
	}

	.elementor-icon-list-icon {
		display: flex;

		svg {
			width: $e-icon-list-svg-icon-size;
			height: $e-icon-list-svg-icon-size;
		}

		i {
			width: 1.25em;
			font-size: var(--e-icon-list-icon-size);
		}
	}

	// Should be applied only on the icon-list widget, and not on any other widget that rely on this CSS.
	&.elementor-widget-icon-list {

		.elementor-icon-list-icon {
			text-align: var(--e-icon-list-icon-align);

			svg {
				$e-icon-list-svg-icon-margin-default-size: 0 calc(#{$e-icon-list-svg-icon-size} * 0.25) 0 0;

				margin: var(--e-icon-list-icon-margin, $e-icon-list-svg-icon-margin-default-size);
			}
		}
	}

	&.elementor-list-item-link-full_width {

		a {
			width: 100%;
		}
	}

	&.elementor-align-center {

		.elementor-icon-list-item {

			&,
			a {
				justify-content: center;
			}

			&:after {
				margin: auto;
			}
		}

		.elementor-inline-items {
			justify-content: center;
		}
	}

	&.elementor-align-left {

		.elementor-icon-list-item {

			&, 
			a {
				justify-content: getValueByDirection(flex-start, flex-end);
				text-align: left;
			}
		}

		.elementor-inline-items {
			justify-content: getValueByDirection(flex-start, flex-end);
		}
	}

	&.elementor-align-right {

		.elementor-icon-list-item {

			&, 
			a {
				justify-content: getValueByDirection(flex-end, flex-start);
				text-align: right;
			}
		}

		.elementor-icon-list-items {
			justify-content: getValueByDirection(flex-end, flex-start);
		}
	}

	&:not(.elementor-align-right) {

		.elementor-icon-list-item {

			&:after {
				@include start(0);
			}
		}
	}

	&:not(.elementor-align-left) {

		.elementor-icon-list-item {

			&:after {
				@include end(0);
			}
		}
	}

	@include loopIconListItem( $breakpoints, 'alignment' );

}
